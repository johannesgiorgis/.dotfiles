# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="${HOME}/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="robbyrussell"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"
HIST_STAMPS="%F_%T"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git
    zsh-autosuggestions
    zsh-syntax-highlighting
    docker
    docker-compose
    virtualenv
    golang
    asdf
    taskwarrior
    timewarrior
    ansible
    command-not-found
    brew
    history
    poetry
    cargo
    fd
    fzf
    npm
    node
    pip
    python
    ripgrep
    rsync
    rust
    rustup
    terraform
    web-search
    zsh-interactive-cd
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
export EDITOR=/usr/bin/vim
export VISUAL=/usr/bin/vim

# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"


# kernel name
kernel_name="$(uname -s)"

###############################################################################################
# >>> ##################################### ALIAS

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# ls
alias lt='ls -lahtFr'

# docker
alias dka='docker ps -aq | xargs -I{} docker kill {}'		# kill all running docker containers
alias dra='docker ps -aq | xargs -I{} docker rm {}'			# remove all docker containers
alias dpa="echo 'pruning system...' && docker system prune -f && echo 'pruning volumes...' && docker volume prune -f"

alias tailf='tail -f'
alias tt='timetrap'
alias c='code'
alias ag='alias | grep'
alias wh='which'

# count files
alias count='find . -type f | wc -l'

# add a copy progress bar
alias cpv='rsync -ah --info=progress2'

# protect yourself from file removal accidents
alias tcn='mv --force -t ~/.local/share/Trash '

# navigate to top leve of a git project
alias cg='cd `git rev-parse --show-toplevel`'

# python virtual environment management
alias venv='python3 -m venv ./venv && source ./venv/bin/activate && pip install --upgrade pip setuptools > /dev/null'
alias va='source ./venv/bin/activate'

# Control output of less
if command -v less 1>/dev/null 2>&1; then
	alias mroe=less more=less
	export PAGER=less
	export LESS=FRdiX
	export LESSCHARSET=utf-8
fi

if command -v nvim 1>/dev/null 2>&1; then
    alias v='nvim'
fi

# Common Python Virtual Environment
if [[ -d "/usr/local/venv/" ]]
then
    alias awslocal=/usr/local/venv/bin/awslocal
    alias yq=/usr/local/venv/bin/yq
    alias xq=/usr/local/venv/bin/xq
fi

# >>> Darwin/Mac OS

if [[ "${kernel_name}" == "Darwin" ]]; then

    # Brew

    if command -v brew 1>/dev/null 2>&1; then
        alias b='brew'
        alias bo='brew outdated --greedy'
        alias brewup='brew update && brew outdated && brew upgrade && brew cleanup && brew doctor'
        alias brewupcask='brew update && brew cask outdated && brew cask upgrade && brew cleanup && brew cask doctor'
    fi

    if command -v bat 1>/dev/null 2>&1; then
        alias cat='bat'
    fi

fi

# <<< Darwin/Mac OS

# >>> Debian/Linux

if [ "${kernel_name}" = "Debian" -o "${kernel_name}" = "Linux" ]; then

    if command -v apt 1>/dev/null 2>&1; then
        alias aptup='sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y'
    fi

    if command -v batcat 1>/dev/null 2>&1; then
        alias cat='batcat'
    fi

    # source: https://opensource.com/article/19/7/bash-aliases
    # see mounted drives
    if [ "${kernel_name}" = "Linux" ]; then
        alias mnt="mount | awk -F' ' '{ printf "%s\t%s\n",$1,$3; }' | column -t | egrep ^/dev/ | sort"
    elif [ "${kernel_name}" = "Debian" ]; then
        alias mnt='mount | grep -E ^/dev | column -t'
    fi

    if [ "${kernel_name}" = "Linux" ]
    then
        alias charm='/home/johannes/.local/bin/charm . > /dev/null 2>&1 &'
    fi

fi

# <<< Debian/Linux

# <<< ##################################### ALIAS
###############################################################################################


###############################################################################################
# >>> ##################################### FUNCTIONS 

# rg 'function' ~/.zshrc | grep '#.\+' | sed 's/^[ \t]*//g;s/^function //' | rg -v '^#| rg ' | awk 'BEGIN {FS = " {.*?# "}; {printf "\033[36m%-20s\033[0m %s\n", $1, $2}'
function af() { # list all functions
    # inspiration: https://www.freecodecamp.org/news/self-documenting-makefile/
    rg 'function.*?#' ~/.zshrc | \
    # remove space in the front
    sed 's/^[ \t]*//g;s/^function //' | \
    # get rid of undesired lines
    rg -v '^#|rg ' | \
    # nice format of functions
    awk 'BEGIN {FS = " {.*?# "}; {printf "\033[36m%-20s\033[0m %s\n", $1, $2}'
}

function mydate() { date +"%Y-%m-%d %H:%M:%S %Z"; } # Date in my format
function today() { date +"%A, %B %d, %Y"; } # Date in secondary format
function note() { echo `date +"%Y-%m-%d %H:%M:%S  "`"$*" >> ~/notes; } # Add a note to my file
function notes() { vim + ~/notes; } # View/edit notes

# add - to 2 and changed head to tail to make it zsh compatible
function gotit() { history -2 | tail -n 1 | cut -c 8- >> ~/notes; }

# Youtube Download to MP3 :)
if command -v youtube-dl 1>/dev/null 2>&1; then
    function yda() { # download youtube videos into mp3 format + delete video format
		youtube-dl -cix --audio-format mp3 "$@"
	}
fi

# Helper Functions
function addcmd() { # Add a command to ~/.zshrc and use it
	vim + ~/.zshrc
	source ~/.zshrc
}

function ushell() { # update shell
	source ~/.zshrc
}

function cproj() { # create dated project directory
	project_name="$@"
	# echo "Project:$project_name"
	new_project_dir="$(date +%F)-${project_name}"
	mkdir -v "$new_project_dir"

	read_me_file=$(echo "$project_name" | grep -o '^.\+\d')
	readme_file="${new_project_dir}/${new_project_dir}-readme.md"
	touch "$readme_file"
	ls -d ${new_project_dir}/*

	# capitalize each word + replace all '-' with ' ' in $project_name
	echo -e "# $(date +%F): ${(C)project_name//-/ } Project Overview" > "${readme_file}"
}

function cmd() { # create dated markdown file
	project_name="$@"
	# echo "Project:$project_name"
	new_project_dir="$(date +%F)-${project_name}"

    # get jira ticket number
	jira_ticket_number=$(echo "$project_name" | grep -o '^.\+\d')
	readme_file="$(date +%F)-${jira_ticket_number}-readme.md"
	touch "$readme_file"

	# capitalize each word + replace all '-' with ' ' in $project_name
	echo -e "# $(date +%F): ${(C)project_name//-/ } Project Overview" > "${readme_file}"
}

function colors() { # see range of colors
	for i in {0..255}
	do
		print -Pn "%K{$i} %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%8)):#7}:+$'\n'}
	done
}

function cdot() { # go to dotfiles directory
	dir="${HOME}/.dotfiles"
	if [[ -d "${dir}" ]]
	then
		echo "Navigating to '${dir}'"
		cd "${dir}"
	else
		echo "ERROR: Directory '${dir}' doesn't exist!"
	fi
}

# >>> Debian/Linux

if [ "${kernel_name}" = "Debian" -o "${kernel_name}" = "Linux" ]; then

    # copy to clipboard on linux
    function copy() { # copy file content into clipboard (linux)
        cat "$@" | xclip -i -selection clipboard
    }

    function apts() { # apt search for specific package (linux)
        apt search "$1" | grep "^$1"
    }
    
    function aptl() { # apt list installed for specific package (linux)
        apt list --installed | grep "$1"
    }
    
    function apti() { # apt install for specific package (linux)
        sudo apt install "$1" -y
    }
    
fi

# <<< Debian/Linux


function update_p10k() { # update powerlevel10k
	git -C $ZSH_CUSTOM/themes/powerlevel10k pull
}

# >>> AWS

function get_params() { # get aws ssm parameters
  DEFAULT_ENV=dev
  ENV=${2-$DEFAULT_ENV}
  if [ -z "$1" ]
  then
    echo "No build yml supplied"
    return 1
  fi
  echo 'using file' $1
  echo "using environtment ${ENV}"
  cat $1 |awk '/--name/{print $7}' | sed -e 's/\${[eE][nN][vV]}/'"${ENV}"'/g' | xargs -n10 aws ssm get-parameters --with-decryption --query "Parameters[*].{Name:Name,Value:Value}" --names
}

function awsprofiles() { # list aws profiles from config file
	config=$(cat $HOME/.aws/config | grep '\[' | sed 's/\[//; s/\]//')
	echo 'config:'
	echo "$config"
}

function config_sso() {
    echo 'https://d-92670d77ef.awsapps.com/start#/'
    aws configure sso
}

function list_profile() {
    cat ~/.aws/config | grep profile
}

function request_credentials() {
    credentials=$(
        aws sts assume-role \
        --profile $1 \
        --role-arn $2 \
        --role-session-name $3
    )
}

function refresh_sso() {
    profile=$1
    temp_identity=$(aws --profile "$profile" sts get-caller-identity)
    account_id=$(echo $temp_identity | jq -r .Arn | cut -d: -f5)
    assumed_role_name=$(echo $temp_identity | jq -r .Arn | cut -d/ -f2)
    session_name=$(echo $temp_identity | jq -r .Arn | cut -d/ -f3)
    sso_region=$(aws --profile "$profile" configure get sso_region)
    
	if [[ $sso_region == 'us-east-1' ]]; then
        sso_region_string=''
    else
        sso_region_string="${sso_region}/"
	fi
	role_arn="arn:aws:iam::${account_id}:role/aws-reserved/sso.amazonaws.com/${sso_region_string}${assumed_role_name}"
    
	echo "=> requesting temporary credentials"
    request_credentials $profile $role_arn $session_name
    
	if [ $? -ne 0 ]; then
        aws sso login --profile "$profile"
		if [ $? -ne 0 ]; then
			exit 1
		fi
		request_credentials $profile $role_arn $session_name
	fi
	echo "=> updating ~/.aws/credentials as profile $profile"
	access_key_id=$(echo $credentials | jq -r .Credentials.AccessKeyId)
	secret_access_key=$(echo $credentials | jq -r .Credentials.SecretAccessKey)
	session_token=$(echo $credentials | jq -r .Credentials.SessionToken)
	aws configure set --profile "$profile" aws_access_key_id "$access_key_id"
	aws configure set --profile "$profile" aws_secret_access_key "$secret_access_key"
	aws configure set --profile "$profile" aws_session_token "$session_token"
	echo "[OK] done"
}

# <<< AWS

# <<< ##################################### FUNCTIONS 
###############################################################################################


###############################################################################################
# >>> ##################################### WORK STUFF

DEFAULT_USER=$(whoami)

# Load work related stuff
# link: ln -s ~/.dotfiles/ansible/roles/infrastructure/zsh/files/zsh_work ~/.zsh_work
# if [[ "$kernel_name" = 'Darwin' ]] && \
#     [[ "$DEFAULT_USER" = 'jgiorgis' ]]
if [[ "$kernel_name" = 'Darwin' ]] && \
    [[ "$USER" = 'johannes.giorgis' ]]
then
    [[ ! -f ~/.zsh_work ]] || source ~/.zsh_work
fi

# <<< ##################################### WORK STUFF
###############################################################################################


###############################################################################################
# >>> ##################################### COMPLETIONS

# >>> Darwin/Mac OS

if [[ "${kernel_name}" = "Darwin" ]]; then

    # AWS COMPLETION - https://github.com/aws/aws-cli/issues/4656
    # Mac - aws v1
    awsv1_dir="/usr/local/opt/awscli@1/"
    if test -d "$awsv1_dir"; then
        alias aws="${awsv1_dir}bin/aws"

        if test -f "/usr/local/opt/awscli@1/bin/aws_completer"; then
            complete -C '/usr/local/opt/awscli@1/bin/aws_completer' aws
        fi
    fi
fi

# <<< Darwin/Mac OS

# AWS Completion
if command -v aws 1>/dev/null 2>&1; then

    function awsm() { aws --profile main "$@"; }

	if test -f "/usr/local/bin/aws_completer"; then
		complete -C '/usr/local/bin/aws_completer' aws awsm
    elif test -f "${HOME}/.asdf/shims/aws_completer"; then
        complete -C "${HOME}/.asdf/shims/aws_completer" aws 
	fi
fi

if command -v aws-vault 1>/dev/null 2>&1; then

    function avp() { aws-vault exec acl-playground -- aws "$@"; }

	if test -f "/usr/local/bin/aws_completer"; then
		complete -C '/usr/local/bin/aws_completer' aws-vault avp
    elif test -f "${HOME}/.asdf/shims/aws_completer"; then
        complete -C "${HOME}/.asdf/shims/aws_completer" aws-vault avp
	fi

fi

# <<< ##################################### COMPLETIONS
###############################################################################################


###############################################################################################
# >>> ##################################### PATH MODIFICATIONS

export PATH=~/bin:$PATH
export PATH=~/.bin:$PATH
export PATH=~/.local/bin:$PATH

# >>> CDPATH - https://jcode.me/cdpath-with-zsh/

#typeset -U path cdpath fpath

#setopt auto_cd
#cdpath=($HOME/work $HOME/work/github)

zstyle ':completion:*' group-name ''
zstyle ':completion:*:descriptions' format %d
zstyle ':completion:*:descriptions' format %B%d%b 				# bold
zstyle ':completion:*:descriptions' format %S%d%s        # invert/standout
# zstyle ':completion:*:descriptions' format %U%d%u        # underline
zstyle ':completion:*:descriptions' format %F{green}%d%f # green foreground
# zstyle ':completion:*:descriptions' format %K{blue}%d%k  # blue background
zstyle ':completion:*:complete:(cd|pushd):*' tag-order \
'local-directories named-directories path-directories'

# <<< CDPATH

# rust binaries

# /home/johannes/.asdf/installs/rust/stable/bin/rg
# export PATH="$HOME/.asdf/installs/rust/stable/bin:$PATH"
#rust_install_dir="$HOME/.asdf/installs/rust/stable"
#if test -d "$rust_install_dir"; then
#    export PATH="${rust_install_dir}/bin:$PATH"
#fi

# add poetry
export PATH="$HOME/.poetry/bin:$PATH"

# awspowertools
#aws_power_tools_dir="$HOME/bin/aws-powertools"
#if test -d "$aws_power_tools_dir"; then
#    export PATH="${aws_power_tools_dir}:$PATH"
#fi

# add tyk
tyk_dir="/opt/tyk-gateway"
if test -d "$tyk_dir"; then
    export PATH="${tyk_dir}:$PATH"
fi

# <<< ##################################### PATH MODIFICATIONS
###############################################################################################

if command -v jump 1>/dev/null 2>&1; then
    eval "$(jump shell)"
fi

if command -v pipx 1>/dev/null 2>&1; then
    eval "$(register-python-argcomplete pipx)"
fi


###############################################################################################
# >>> ##################################### SHELL COMPLETIONS

# <<< ##################################### SHELL COMPLETIONS
###############################################################################################

###############################################################################################
# >>> ##################################### MISC

if command -v broot 1>/dev/null 2>&1; then
	source ${HOME}/.config/broot/launcher/bash/br
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Disabled shared history across terminal tabs
unsetopt SHARE_HISTORY

# <<< ##################################### MISC
###############################################################################################

# Added by serverless binary installer
export PATH="$HOME/.serverless/bin:$PATH"

# tabtab source for packages
# uninstall by removing these lines
[[ -f ~/.config/tabtab/__tabtab.zsh ]] && . ~/.config/tabtab/__tabtab.zsh || true

