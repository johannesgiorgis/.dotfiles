#!/usr/bin/env bash

###################################################################
#
# dot-bootstrap Script
# ----------------
# Runs ansible playbooks for bootstrapping/updating system
#
###################################################################

set -e

export SUPPORT_DIR="${HOME}/.dotfiles/support"
source "${SUPPORT_DIR}/common-utilities.sh"

ANSIBLE_DIR="${HOME}/.dotfiles/ansible"
PLAYBOOK_FILE="${ANSIBLE_DIR}/dotfiles.yml"
HOSTS_FILE="${ANSIBLE_DIR}/hosts"


function usage() {
    echo "ERROR: Script requires the following inputs:"
    echo "Usage:
        ${0##*/} # will display all available tags
        ${0##*/} -t zsh -a
        ${0##*/} -f macos
        "
    echo "Options:
        -f: find tag
        -t: tag for ansible (default: all)
        -i: get info for an aggregate tag (tags with multiple packages. e.g. macos-cli, macos-infra)
        -a: enable ask_become_pass"
}


main() {

    ask_become_pass="false"

    options="t:f:e:i:adh"
    while getopts "$options" opt; do
        case $opt in
            a  ) ask_become_pass="true" ;;
            f  ) to_find="$OPTARG" ;;
            t  ) tags+=("$OPTARG") ;;
            i  ) to_info="$OPTARG" ;;
            h  ) usage; exit 0 ;;
            :  ) echo "Option -$OPTARG requires an argument." >&2; usage; exit 1 ;;
            \? ) echo "Invalid option: -$OPTARG" >&2; usage; exit 1 ;;
        esac
    done
    shift $((OPTIND -1))

    start=$(date +%s)
    echo "${SCRIPT_BREAK}"
    print_info "$0 Started"
    
    print_info "playbook_file:${PLAYBOOK_FILE}"
    print_info "tags before:'${tags[*]}'"
    tags=$(echo "$tags" | sed 's/ /,/g')
    print_info "tags after:'${tags}'"
    print_info "tags:'${tags}'"
    print_info "ask_becomen_pass?${ask_become_pass}"

    ensure_ansible_is_present

    # search for tag
    if [[ "$to_find" != "" ]]; then
        search_for_tag "$to_find"
        exit 0
    fi

    # get info for specified tag
    if [[ "$to_info" != "" ]]; then
        get_tag_info "$to_info"
        exit 0
    fi

    # list available tags
    if [[ "$tags" == "" ]]; then
        list_available_tags
        exit 0
    fi

    command_options=" ${PLAYBOOK_FILE} -i ${HOSTS_FILE} --tags ${tags[*]}"
    
    if [[ "$ask_become_pass" == "true" ]]; then
        command_options="${command_options} --ask-become-pass"
    fi

    ansible-playbook $command_options
 
    end=$(date +%s)
    runtime=$((end-start))
    runtime_min=$(convert_seconds_to_min $runtime)
    
    finished "$0 Completed with $runtime seconds ($runtime_min mins)"
    echo "${SCRIPT_BREAK}"
}


function search_for_tag() { # search for a tag
    local to_find=$1
    echo "Searching for '$to_find'..."
    found_tag=$(cat "${PLAYBOOK_FILE}" | grep -v '#' | grep -o '\[\([^]]\+\)\]' | sed 's/\[//; s/\]//' | grep "$to_find")
    echo -e "\nFound Tag(s):\n'$found_tag'"
}


function get_tag_info() { # get tag info
    local to_info=$1
    echo "Searching for '$to_info'..."
    found_info_tag=$(cat "${PLAYBOOK_FILE}" | grep -v '#' | grep -o '\[\([^]]\+\)\]' | sed 's/\[//; s/\]//' | grep "$to_info")
    num_found_tags=$(echo "$found_info_tag" | wc -l | sed 's/ //g')
    echo -e "\n$num_found_tags Found Info Tag(s):\n'$found_info_tag'"
    
    if [[ "$found_info_tag" == "" ]]; then
        echo "ERROR: tag doesn't exist. Exiting with error"
        exit 1
    fi

    if [[ "$num_found_tags" != 1 ]]; then
        echo "ERROR: More than 1 tags found. Exiting with error"
        exit 1
    fi

    # TODO: ensure fdfind is installed!
    if [[ $(uname) = "Linux" ]]; then
        directory=$(fdfind "$to_info" $ANSIBLE_DIR)
    elif [[ $(uname) = "Darwin" ]]; then
        directory=$(fd "$to_info" $ANSIBLE_DIR)
    fi
    echo "Directory:$directory"

    echo -e "\nPackages for '$to_info' tag:"
    cat "$directory/README.md" |\
        # grab lines with either '- ack' or '- [coreutils]'
        grep -E '(^\- \[\([^]]\+\)\]|^- )' |\
        # remove '[' and ']' + everything afterwards
        sed 's/\[//g; s/\].*//g' |\
        sort
}


function list_available_tags() { # lists available tags
    available_tags=$(cat "${PLAYBOOK_FILE}" |\
        # ignore commented out lines
        grep -v '#' |\
        # grab tags - [*]
        grep -o '\[\([^]]\+\)\]' |\
        # remove brackets - [,]
        sed 's/\[//; s/\]//' | sort)
    available_tags="all\n$available_tags"
    echo -e "\nAvailable Tags:"
    echo -e "$available_tags"
}


function ensure_ansible_is_present() {
    print_info "› Ensuring ansible is present..."
    if [ -x "$(command -v ansible)" ]
    then
        success "ansible is present - proceeding..."
        return 0
    fi

    # need to install ansible
    print_info "› Installing ansible..."
    if [[ "$(uname)" == "Darwin" ]]
    then
        print_info "› On Mac..."
        ensure_homebrew_is_present
        brew install ansible
    else
        release_code=$(lsb_release -c -s)
        print_info "› On Linux '$release_code'..."

        if [[ "$release_code" == "bionic" ]]; then
            sudo apt-add-repository ppa:ansible/ansible -y
            sudo apt update
            sudo apt install ansible=2.9.9-1ppa~bionic -V -y

        elif [[ "$release_code" == "focal" ]]; then
            install_ansible_base_and_collections_on_debian

        else
            fail "ERROR: Unknown linux release code - '$release_code'. Exiting with error"
            exit 1
        fi
    fi
}

function ensure_homebrew_is_present() {
    print_info "› Ensuring homebrew is present..."
    if [ -x "$(command -v brew)" ]
    then
        success "homebrew is present - proceeding..."
        return 0
    fi

    # need to install homebrew
    print_info "› Installing homebrew..."
    if [[ "$(uname)" == "Darwin" ]]
    then
        # https://brew.sh/
        print_info "› On Mac..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    else
        fail "ERROR: homebrew is only for MacOS, not for $(uname)"
        exit 1
    fi
}


# Ansible Install notes
# via pipx: tied to specific python so needs path hardcoded
# via apt install ansible: get a Traceback issue
# Traceback (most recent call last):
#  File "/usr/bin/ansible-playbook", line 34, in <module>
#    from ansible import context
# ModuleNotFoundError: No module named 'ansible'
# solution: install ansible-base via apt + install community.general collection
# 2021-07-11
# λ  apts ansible
# 
# WARNING: apt does not have a stable CLI interface. Use with caution in scripts.
# 
# ansible/focal,focal,now 2.9.6+dfsg-1 all [residual-config]
# ansible-base/focal,focal,now 2.10.11-1ppa~focal all [residual-config]
# ansible-doc/focal,focal 2.9.6+dfsg-1 all
# ansible-lint/focal,focal 4.2.0-1 all
# ansible-test/focal,focal 2.10.11-1ppa~focal all
# ansible-tower-cli/focal,focal 3.3.0-1.1 all
# ansible-tower-cli-doc/focal,focal 3.3.0-1.1 all
function install_ansible_base_and_collections_on_debian() {
    print_info "Install ansible-base + collections on debian"
    # https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-on-ubuntu
    sudo apt update
    sudo apt install software-properties-common
    # sudo add-apt-repository --yes --update ppa:ansible/ansible
    sudo apt install ansible-base -V -y

    # install collections
    ansible-galaxy collection install community.general
    success "Install ansible-base + collections on debian"
}


main "$@"
