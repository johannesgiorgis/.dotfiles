#!/usr/bin/env bash

###################################################################
#
# dot-bootstrap Script
# ----------------
# Runs ansible playbooks for bootstrapping/updating system
#
###################################################################

set -e

export SUPPORT_DIR="${HOME}/.dotfiles/support"
source "${SUPPORT_DIR}/common-utilities.sh"

ANSIBLE_DIR="${HOME}/.dotfiles/"
PLAYBOOK_FILE="${ANSIBLE_DIR}/dotfiles.yml"
HOSTS_FILE="${ANSIBLE_DIR}/hosts"

function usage() {
  echo "ERROR: Script requires the following inputs:"
  echo "Usage:
    ${0##*/} -t zsh -a
    "
  echo "Options:
    -t: tag for ansible (default: all)
    -a: enable ask_become_pass"
}

main() {

  ask_become_pass="false"
  tags=""

  options="t:ah"
  while getopts "$options" opt; do
    case $opt in
      a ) ask_become_pass="true" ;;
      t ) tags="$OPTARG" ;;
      h ) usage; exit 0 ;;
      : ) echo "Option -$OPTARG requires an argument." >&2; usage; exit 1 ;;
      \? ) echo "Invalid option: -$OPTARG" >&2; usage; exit 1 ;;
    esac
  done
  shift $((OPTIND -1))

  start=$(date +%s)
  echo "${SCRIPT_BREAK}"
  print_info "$0 Started"
  
  print_info "playbook_file:${PLAYBOOK_FILE}"
  print_info "tags:'${tags}'"
  print_info "ask_become_pass?${ask_become_pass}"

  ensure_ansible_is_present

  # list available tags
  if [[ "$tags" == "" ]]; then
    available_tags=$(cat "${PLAYBOOK_FILE}" | grep -o '\[\([^]]\+\)\]' | sed 's/\[//; s/\]//' | sort)
    available_tags="all\n$available_tags"
    echo -e "\nAvailable Tags:"
    echo -e "$available_tags"
    exit 0
  fi


  if [[ "$ask_become_pass" == "true" ]]; then
    ansible-playbook -i "${HOSTS_FILE}" "${PLAYBOOK_FILE}" --tags "$tags" --ask-become-pass
  
  else
    ansible-playbook -i "${HOSTS_FILE}" "${PLAYBOOK_FILE}" --tags "$tags"
  fi
  
  end=$(date +%s)
  runtime=$((end-start))
  runtime_min=$(convert_seconds_to_min $runtime)
  
  finished "$0 Completed with $runtime seconds ($runtime_min mins)"
  echo "${SCRIPT_BREAK}"
}


function ensure_ansible_is_present() {
  print_info "› Ensuring ansible is present..."
  if [ -x "$(command -v ansible)" ]
  then
    success "ansible is present - proceeding..."
    return 0
  fi

  # need to install ansible
  print_info "› Installing ansible..."
  if [[ "$(uname)" == "Darwin" ]]
  then
      print_info "› On Mac..."
      brew install ansible #@2.9.6
      brew pin ansible
  else
      release_code=$(lsb_release -c -s)
      print_info "› On Linux '$release_code'..."
      if [[ "$release_code" == "bionic" ]]; then
          sudo apt-add-repository ppa:ansible/ansible -y
          sudo apt update
          sudo apt install ansible=2.9.9-1ppa~bionic -V -y
      elif [[ "$release_code" == "focal" ]]; then
          sudo apt update
          sudo apt install ansible -V -y
      else
          fail "ERROR: Unknown linux release code - '$release_code'. Exiting with error"
          exit 1
      fi
  fi
}

main "$@"
