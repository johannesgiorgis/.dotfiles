#!/usr/bin/env bash

##########################################################################
#
# doi: dotfiles manager
# ---------------------
# Uses ansible playbooks for managing system software, configuration
# Dependencies kept to a minimal - ansible, homebrew
#
##########################################################################

set -e

source "${HOME}/.dotfiles/bin/common-utilities.sh"

ANSIBLE_DIR="${HOME}/.dotfiles"
PLAYBOOK_FILE="${ANSIBLE_DIR}/dotfiles.yml"
HOSTS_FILE="${ANSIBLE_DIR}/hosts"


function usage() {
    echo -e "${red}ERROR: Script requires the following inputs:
    ${blue}
    -f: find tag
    -t: tag for ansible (default: all)
    -i: get info for an aggregate tag (tags with multiple packages. e.g. macos-cli, macos-infra)
    -a: enable ask_become_pass
    "
    echo -e "${yellow}Usage:
        ${0##*/} # will display all available tags
        ${0##*/} -t zsh -a
        ${0##*/} -f macos
        "
}


main() {

    ask_become_pass="false"

    options="t:f:e:i:adh"
    while getopts "$options" opt; do
        case $opt in
            a  ) ask_become_pass="true" ;;
            f  ) to_find="$OPTARG" ;;
            t  ) tags+=("$OPTARG") ;;
            i  ) to_info="$OPTARG" ;;
            h  ) usage; exit 0 ;;
            :  ) echo "Option -$OPTARG requires an argument." >&2; usage; exit 1 ;;
            \? ) echo "Invalid option: -$OPTARG" >&2; usage; exit 1 ;;
        esac
    done
    shift $((OPTIND -1))

    start=$(date +%s)
    echo "${SCRIPT_BREAK}"
    print_info "$0 Started"
    
    print_info "playbook_file:${PLAYBOOK_FILE}"
    print_info "tags before:'${tags[*]}'"
    tags=$(echo "$tags" | sed 's/ /,/g')
    print_info "tags after:'${tags}'"
    print_info "tags:'${tags}'"
    print_info "ask_becomen_pass?${ask_become_pass}"

    ensure_ansible_is_present

    # search for tag
    if [[ "$to_find" != "" ]]; then
        search_for_tag "$to_find"
        exit 0
    fi

    # get info for specified tag
    if [[ "$to_info" != "" ]]; then
        get_tag_info "$to_info"
        exit 0
    fi

    # list available tags
    if [[ "$tags" == "" ]]; then
        list_available_tags
        exit 0
    fi

    command_options=" ${PLAYBOOK_FILE} -i ${HOSTS_FILE} --tags ${tags[*]}"
    
    if [[ "$ask_become_pass" == "true" ]]; then
        command_options="${command_options} --ask-become-pass"
    fi

    ansible-playbook $command_options
 
    end=$(date +%s)
    runtime=$((end-start))
    runtime_min=$(convert_seconds_to_min $runtime)
    
    finished "$0 Completed with $runtime seconds ($runtime_min mins)"
    echo "${SCRIPT_BREAK}"
}


function search_for_tag() { # search for a tag
    local to_find=$1
    echo "Searching for '$to_find'..."
    tags=$(get_tags)
    found_tag=$(echo -e "$tags" | grep "$to_find")
    # TODO: Test alternative: grep -o $to_find | head -1
    echo -e "\n${green}Found Tag(s):\n'$found_tag'"
}

function get_tags() {
    grep -v '#' "$PLAYBOOK_FILE" |\
        # Extract tags as [*]
        grep -o '\[\([^]]\+\)\]' |\
        # Remove surrounding brackets - [,]
        awk -F '[][]' '{print $2}'
}


function get_tag_info() { # get tag info
    local to_info=$1
    echo "Searching for '$to_info'..."
    tags=$(get_tags)
    found_info_tag=$(echo -e "$tags" | grep "$to_info")
    num_found_tags=$(echo "$found_info_tag" | wc -l | sed 's/ //g')
    echo -e "\n${green}$num_found_tags Found Info Tag(s):\n$found_info_tag"
    
    if [[ "$num_found_tags" != 1 ]]; then
        echo -e "${red}ERROR: More than 1 tags found. Exiting with error"
        exit 1
    fi

    find_directory "$to_info"
    echo -e "Directory:${yellow}$directory"

    echo -e "\n${light_blue}Packages for '$to_info' tag:"
    cat "$directory/README.md" |\
        # grab lines with either '- ack' or '- [coreutils]'
        grep -E '(^\- \[\([^]]\+\)\]|^- )' |\
        # remove lines with comments on them - ###
        grep -v '###' |\
        # remove '[' and ']' + everything afterwards
        sed 's/\[//g; s/\].*//g' |\
        sort
}


function find_directory() { # find directory
    local to_info=$1
    
    if [[ $(uname) == "Linux" ]]; then
        cmd="fdfind"

    elif [[ $(uname) == "Darwin" ]]; then
        cmd="fd"
    fi

    if [ ! -x "$(command -v $cmd)" ]; then
        echo -e "${red}ERROR: Ensure $cmd is installed via common-cli role"
        exit 1
    fi

    directory=$($cmd "$to_info" $ANSIBLE_DIR)
}


function list_available_tags() { # lists available tags
    # tag_sections=$(grep -v '#' "$PLAYBOOK_FILE" |\
    #     # extract full role name
    #     grep -o 'role:.\+,' | sed 's/^role: //;s/.$//')
    ######################################################
    # The extraction logic transforms all role and 
    # corresponding tags into <role_prefix>/<tag> format
    #
    # Below is logic demo:
    #
    # - { role: cli/broot, tags: [broot] }
    # -> cli/broot
    #
    # - { 
    #  role: infrastructure/git,
    #  tags: [git-personal],
    # -> infrastructure/git-personal
    #
    #  role: infrastructure/git,
    #  tags: [git-professional],
    # -> infrastructure/git-professional
    #
    # It was motivated by the re-use of git role via
    # separate tags to allow different variables in
    # This resulted in doi only showing 1 git tag
    # as previous logic extracted roles to get
    # role prefixes
    #
    # Logic has to ensure each line has both role
    # and corresponding tag before it does clean up
    # to get the final <role_prefix>/<tag> format
    ######################################################
    role_tags_sections=$(grep -v '#' dotfiles.yml |\
        grep -e 'role\|tag' |\
        # remove all white space
        tr -d ' ' |\
        # ensure role and corresponding tags in same line
        # ref: https://unix.stackexchange.com/questions/389764/merge-next-line-with-previous-line
        sed 'H;1h;$!d;g;s/\ntags/tags/g' |\
        # remove surrounding brackets
        sed 's/^-{//g;s/}//g' |\
        # extract role, tag sections
        cut -d':' -f2,3 |\
        # replace role name with value from tag
        # git -> git-professional, git-personal
        # remove surrounding brackets
        sed 's:/.*\[:/:g;s/\]//g' |\
        # handle work-macos-software
        cut -d',' -f1
    )


    echo -e "\nAvailable Tags:"
    # Color Code based on type
    tags=""
    for line in $role_tags_sections
    do
        if [[ $line == *"cli/"* ]]; then
            tags="${tags}  ${light_yellow}${line#"cli/"}"
        elif [[ $line == *"infrastructure/"* ]]; then
            tags="${tags}  ${light_blue}${line#"infrastructure/"}"
        elif [[ $line == *"software/"* ]]; then
            tags="${tags}  ${light_green}${line#"software/"}"
        else
            tags="${tags}  ${magenta}${line}"
        fi
        tags="$tags\n"
    done

    echo -e "$tags"
    echo -e "${light_gray}LEGEND: 
    ${light_yellow}CLI  ${light_blue}INFRASTRUCTURE  ${light_green}SOFTWARE  ${magenta}MISC${default}"

}


function ensure_ansible_is_present() {
    print_info "› Ensuring ansible is present..."
    if [ -x "$(command -v ansible)" ]
    then
        success "ansible is present - proceeding..."
        return 0
    fi

    # need to install ansible
    print_info "› Installing ansible..."
    if [[ "$(uname)" == "Darwin" ]]
    then
        print_info "› On Mac..."
        ensure_homebrew_is_present
        brew install ansible
    else
        release_code=$(lsb_release -c -s)
        print_info "› On Linux '$release_code'..."

        if [[ "$release_code" == "bionic" ]]; then
            # sudo apt-add-repository ppa:ansible/ansible -y
            # sudo apt update
            # sudo apt install ansible=2.9.9-1ppa~bionic -V -y
            apt-get install -y ansible

        elif [[ "$release_code" == "focal" ]]; then
            install_ansible_base_and_collections_on_debian

        else
            fail "ERROR: Unknown linux release code - '$release_code'. Exiting with error"
            exit 1
        fi
    fi
}

function ensure_homebrew_is_present() {
    print_info "› Ensuring homebrew is present..."
    if [ -x "$(command -v brew)" ]
    then
        success "homebrew is present - proceeding..."
        return 0
    fi

    # need to install homebrew
    print_info "› Installing homebrew..."
    # https://brew.sh/
    print_info "› On Mac..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}


# Ansible Install notes
# via pipx: tied to specific python so needs path hardcoded
# via apt install ansible: get a Traceback issue
# Traceback (most recent call last):
#  File "/usr/bin/ansible-playbook", line 34, in <module>
#    from ansible import context
# ModuleNotFoundError: No module named 'ansible'
# solution: install ansible-base via apt + install community.general collection
# 2021-07-11
# λ  apts ansible
# 
# WARNING: apt does not have a stable CLI interface. Use with caution in scripts.
# 
# ansible/focal,focal,now 2.9.6+dfsg-1 all [residual-config]
# ansible-base/focal,focal,now 2.10.11-1ppa~focal all [residual-config]
# ansible-doc/focal,focal 2.9.6+dfsg-1 all
# ansible-lint/focal,focal 4.2.0-1 all
# ansible-test/focal,focal 2.10.11-1ppa~focal all
# ansible-tower-cli/focal,focal 3.3.0-1.1 all
# ansible-tower-cli-doc/focal,focal 3.3.0-1.1 all
function install_ansible_base_and_collections_on_debian() {
    print_info "Install ansible-base + collections on debian"
    # https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-on-ubuntu
    sudo apt update
    sudo apt install software-properties-common
    # sudo add-apt-repository --yes --update ppa:ansible/ansible
    sudo apt install ansible-base -V -y

    # install collections
    ansible-galaxy collection install community.general
    success "Install ansible-base + collections on debian"
}


main "$@"
