# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# Gawk fix:
if [ -e /usr/bin/nawk ]; then export GAWK=/usr/bin/nawk; fi
if [ -e /usr/local/bin/gawk ]; then export GAWK=/usr/local/bin/gawk; fi
if [ -e /usr/bin/gawk ]; then export GAWK=/usr/bin/gawk; fi

SEC=()
trap 'SEC=( "$(date +%s)" "${SEC[0]}")' DEBUG
#function seconds2days() { date -d "1978/01/01+$1seconds" +"%wd%T"; }
function seconds2days() {
  echo $1 | $GAWK '{time=$1;days=int(time/86400);time-=days*86400;hours=int(time/3600);time-=hours*3600;minutes=int(time/60);seconds=time-minutes*60;printf "%dd%02d:%02d:%02d\n",days,hours,minutes,seconds}'
}

function seconds2daysago() {
  if [[ "$1" == "" ]]; then
    echo "Usage: seconds2daysago timestamp"
    echo "  This will calculate the number of seconds between the given timestamp (unix epoch time) and now,"
    echo "  then call seconds2days with it."
    return 1
  fi
  local NOW=$(date +%s)
  local WHEN="${SEC[0]}"
  local ELAPSED=$(( $NOW - ${SEC[0]} ))
  if [[ $(id -u) == 0 ]]; then
    ELAPSED=$(( $NOW - ${SEC[1]} ))
  fi
  seconds2days "$ELAPSED"
}

# <<< customize git prompts

# Enable tab completion
source ~/git-completion.bash

# colors!
green="\[\033[0;32m\]"
blue="\[\033[0;34m\]"
purple="\[\033[0;35m\]"
reset="\[\033[0m\]"

# Change command prompt
source ~/git-prompt.sh
export GIT_PS1_SHOWDIRTYSTATE=1
# '\u' adds the name of the current user to the prompt
# '\$(__git_ps1)' adds git-related stuff
# '\W' adds the name of the current directory
#export PS1="$purple\u$green\$(__git_ps1)$blue \W $ $reset"

# >>> customize git prompts

if [ "$color_prompt" = yes ]; then
    #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ '
    PS1="(\$(seconds2daysago 1))\[\033[01;32m\]johannesg\[\033[00m\]$green\$(__git_ps1) \[\033[01;34m\]\W \[\033[00m\]\$ "
else
    PS1='${debian_chroot:+($debian_chroot)}johannesg:\W\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \W\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[ -f /home/johannes/work/apps/serverless/backend/node_modules/tabtab/.completions/serverless.bash ] && . /home/johannes/work/apps/serverless/backend/node_modules/tabtab/.completions/serverless.bash
# tabtab source for sls package
# uninstall by removing these lines or running `tabtab uninstall sls`
[ -f /home/johannes/work/apps/serverless/backend/node_modules/tabtab/.completions/sls.bash ] && . /home/johannes/work/apps/serverless/backend/node_modules/tabtab/.completions/sls.bash
# tabtab source for slss package
# uninstall by removing these lines or running `tabtab uninstall slss`
[ -f /home/johannes/work/apps/serverless/backend/node_modules/tabtab/.completions/slss.bash ] && . /home/johannes/work/apps/serverless/backend/node_modules/tabtab/.completions/slss.bash

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/johannes/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/johannes/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/johannes/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/johannes/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# >>> Inspiration from Charles :)
function mydate() { date +"%Y-%m-%d %H:%M:%S"; } # Date in my format
function note() { echo `date +"%Y-%m-%d %H:%M:%S "`"$*" >> ~/notes; } # Add a note to my file
function notes() { vim + ~/notes; } # View/edit notes

function fnote() {  echo "<a href=\"$1\">$2</a> ${@:3}<br/>" >> ~/notes.html; }
function fnotes() {  firefox ~/notes.html; }
function fnoted() {  vi ~/notes.html; }

function gotit() { history 2 | head -n 1 | cut -c 8- >> ~/notes; }

# <<< Inspiration from Charles :)


