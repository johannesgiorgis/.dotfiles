# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# >>> History

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000
HISTTIMEFORMAT="%F_%T "

# <<< History

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
    linux) color_prompt=yes;;
    xterm) color_prompt=yes;;
    xterm-color) color_prompt=yes;;
    xterm-256color) color_prompt=yes;;
    screen) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# Gawk fix:
if [ -e /usr/bin/nawk ]; then export GAWK=/usr/bin/nawk; fi
if [ -e /usr/local/bin/gawk ]; then export GAWK=/usr/local/bin/gawk; fi
if [ -e /usr/bin/gawk ]; then export GAWK=/usr/bin/gawk; fi

SEC=()
trap 'SEC=( "$(date +%s)" "${SEC[0]}")' DEBUG
#function seconds2days() { date -d "1978/01/01+$1seconds" +"%wd%T"; }
function seconds2days() {
  echo $1 | $GAWK '{time=$1;days=int(time/86400);time-=days*86400;hours=int(time/3600);time-=hours*3600;minutes=int(time/60);seconds=time-minutes*60;printf "%dd%02d:%02d:%02d\n",days,hours,minutes,seconds}'
}

function seconds2daysago() {
  if [[ "$1" == "" ]]; then
    echo "Usage: seconds2daysago timestamp"
    echo "  This will calculate the number of seconds between the given timestamp (unix epoch time) and now,"
    echo "  then call seconds2days with it."
    return 1
  fi
  local NOW=$(date +%s)
  local WHEN="${SEC[0]}"
  local ELAPSED=$(( $NOW - ${SEC[0]} ))
  if [[ $(id -u) == 0 ]]; then
    ELAPSED=$(( $NOW - ${SEC[1]} ))
  fi
  seconds2days "$ELAPSED"
}

# <<< customize git prompts

# Enable tab completion
if [[ -f ~/.git-completion.bash ]]; then source ~/.git-completion.bash; fi

# colors!
green="\[\033[0;32m\]"
blue="\[\033[0;34m\]"
purple="\[\033[0;35m\]"
reset="\[\033[0m\]"

# Change command prompt
if [[ -f ~/.git-prompt.sh ]]; then source ~/.git-prompt.sh; fi

export GIT_PS1_DESCRIBE_STYLE=default
export GIT_PS1_SHOWCOLORHINTS=1
export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWUPSTREAM=auto
#export GIT_PS1_STATESEPARATOR=1
#export GIT_PS1_HIDE_IF_PWD_IGNORED=1

# '\u' adds the name of the current user to the prompt
# '\$(__git_ps1)' adds git-related stuff
# '\W' adds the name of the current directory
#export PS1="$purple\u$green\$(__git_ps1)$blue \W $ $reset"

# >>> customize git prompts

if [ "$color_prompt" = yes ]; then
    colorflag=`/sbin/ifconfig -a |\
      $GAWK '/inet /&&!/127[.]0[.]0[.]1/{\
        a=$2;\
        sub(".*[.]","",a);\
        for (x=6;x>=0;x-=2){\
          b=int(a/(2^x))%4+101;\
          printf "\\\\[\\\\e[%sm\\\\] ",b;\
        };\
        printf "\\\\[\\\\e[m\\\\]";\
        exit 0\
        }'`
    #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ '
    #PS1="(\$(seconds2daysago 1))\[\033[01;32m\]johannesg\[\033[00m\]$green\$(__git_ps1) \[\033[01;34m\]\W \[\033[00m\]\n\$ "

    PS1="(\$(seconds2daysago 1))$green\$(__git_ps1) \[\033[01;32m\]\u@\h:\[\033[01;34m\]\w \[\033[00m\]\n\$ "

    #if [ -w / ]; then
	#    PS1="(\$(seconds2daysago 1))$colorflag$green\$(__git_ps1) \[\e[1;33m\]\u@\h:\[\e[32;7m\]\w/\[\e[0m\]\n> "
    #fi

    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    PS1="(\$(seconds2daysago 1))\[\033[01;32m\]johannesg\[\033[00m\]$green\$(__git_ps1) \[\033[01;34m\]\W \[\033[00m\]\$ "
else
    #PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    #PS1='${debian_chroot:+($debian_chroot)}johannesg:\W\$ '
    PS1="(\$(seconds2daysago 1)) \h:\w/> "
    if [ -w / ]; then
      PS1="(\$(seconds2daysago 1))ROOT \h:\w/> "
    fi
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    #PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    PS1="\[\e]0;\h:\w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls -F --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -AF'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

#alias python='python3'

# >>> Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# directories
alias mkdir='mkdir -v'
alias md='mkdir'

# files
alias rm='rm -v'
alias rd=rmdir

# sort by file size
alias lt='ls --human-readable --size -1 -S --classify'

# view only mounted drives
# alias mnt="mount | awk -F' ' '{ printf \"%s\t%s\n\",$1,$3; }' | column -t | egrep ^/dev/ | sort"

# find command in grep history
alias gh='history|grep'

# sort by modification time
alias left='ls -tl -1'
alias ll='ls -ltra'

# count files
alias count='find . -type f | wc -l'

# create python virtual environment
alias ve='virtualenv -p /usr/bin/python3.7 ./venv'
alias ve3.6='virtualenv -p /usr/bin/python3.6 ./venv'
#alias ve3.6='python3 -m venv ./venv'
alias va='source ./venv/bin/activate'

# pip
#alias pip='pip3'

# add a copy progress bar
alias cpv='rsync -ah --info=progress2'

# protect yourself from file removal accidents
alias tcn='mv --force -v -t ~/.local/share/Trash '

# tailf
alias tailf='tail -f'

# <<< Alias definitions.

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# set vi as default editor
export EDITOR=vi
export VISUAL=vi

# added by Anaconda3 5.3.1 installer
# >>> conda init >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$(CONDA_REPORT_ERRORS=false '/home/johannes/anaconda3/bin/conda' shell.bash hook 2> /dev/null)"
if [ $? -eq 0 ]; then
    \eval "$__conda_setup"
else
    if [ -f "/home/johannes/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/johannes/anaconda3/etc/profile.d/conda.sh"
        CONDA_CHANGEPS1=false conda activate base
    else
        \export PATH="/home/johannes/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda init <<<

# >>> bash functions

# change directories and view the contents at the same time
function cl() {
    DIR="$*";
        # if no DIR given, go home
        if [ $# -lt 1 ]; then 
                DIR=$HOME;
    fi;
    builtin cd "${DIR}" && \
    # use your preferred ls command
        ls -F --color=auto
}

# Inspiration from Charles Howes :)
function addcmd() { vim + ~/.bashrc; source ~/.bashrc; }  # Add a command to ~/.bashrc and use it

function sush() { sudo bash -i; }

function mydate() { date +"%Y-%m-%d %H:%M:%S"; } # Date in my format
function note() { echo `date +"%Y-%m-%d %H:%M:%S "`"$*" >> ~/notes; } # Add a note to my file
function notes() { vim + ~/notes; } # View/edit notes

function fnote() {  echo "<a href=\"$1\">$2</a> ${@:3}<br/>" >> ~/notes.html; }
function fnotes() {  firefox ~/notes.html; }
function fnoted() {  vi ~/notes.html; }

function gotit() { history 2 | head -n 1 | cut -c 8- >> ~/notes; }

function sgrep () {
   find . -name .svn -prune -o -name build -prune -o -name node_modules -prune -o -name tags -prune -o -name .git -prune -o -type f -print0 | xargs -0 grep "$@"
}

# ssh tunnel
sshn() {
  # set your desired host and port forwarding as default
  # and allow them to be passed in if you should need it

  host="${1:-opsboxv2}"
  port="${2:-8890:127.0.0.1:8890}"

  # now all you have to do is `sshn` and it will connect

  echo "executing ssh -N $host -L $port"
  ssh -N "$host" -L "$port"
}

# Charle's Inspiration

function countdown() { 
  if [[ "$1" == "" ]]; then
    echo "Usage: countdown 'datestamp'"
    echo "  countdown next minute"
    echo "  countdown next hour"
    echo "  countdown next day"
    echo "This will count down until the specified time."
    return 1
  fi
  local when="$*"
  if [[ "$when" == "next minute" ]]; then when="$(date -d"1 minute" +%H:%M)"; fi
  if [[ "$when" == "next hour" ]]; then when="$(date -d"1 hour" +%H:00)"; fi
  if [[ "$when" == "next day" ]]; then when="$(date -d"1 day" +"%F 00:00")"; fi
  local endtime=$(date -d"$when" +%s)
  while [[ $(date +%s) -lt $endtime ]]; do
    sleep 1
    local difftime=$(( endtime - $(date +%s) ))
    echo -e "\r$difftime seconds left    \c"
  done
  echo "Done!                             "
}


# Timediff: show the difference between two times.
# $1 = Time #1 (earlier)
# $2 = Time #2 (later)
# $3 = optional divisor, eg. "/60", "/3600", "/86400", "/86400/30", "/86400/365", etc
# $4 = string to append
# Any time recognized by 'date -d' is acceptable (eg. "5 minutes ago").
# Append "UTC" or "Z" for the UTC timezone.
function timediff() { 
  if [[ "$1" == "" ]]; then
    echo "Usage: timediff 'old date' 'new date'"
    echo "       timediff 'old date' 'new date' '/3600'"
    echo "       timediff 'old date' 'new date' '/3600' 'hours ago'"
    return 1
  fi
  local a=$(date -d "$1" +%s); if [[ "$a" == "" ]]; then return 1; fi
  local b=$(date -d "$2" +%s); if [[ "$b" == "" ]]; then return 1; fi
  local c=""
  if [[ "$4" != "" ]]; then c=" $4"; fi
  echo "scale=1;print ( $b - $a ) $3,\"$c\n\"" | bc
}

function yearsago()      { timediff "$*" now "/ 86400 / 365" "years ago"; }
function monthsago()     { timediff "$*" now "/ 86400 / 30" "months ago"; }
function daysago()       { timediff "$*" now "/ 86400" "days ago"; }
function hoursago()      { timediff "$*" now "/ 3600" "hours ago"; }
function minutesago()    { timediff "$*" now "/ 60" "minutes ago"; }
function secondsago()    { timediff "$*" now "" "seconds ago"; }

function yearstogo()     { timediff now "$*" "/ 86400 / 365" "years to go"; }
function monthstogo()    { timediff now "$*" "/ 86400 / 30" "months to go"; }
function daystogo()      { timediff now "$*" "/ 86400" "days to go"; }
function hourstogo()     { timediff now "$*" "/ 3600" "hours to go"; }
function minutestogo()   { timediff now "$*" "/ 60" "minutes to go"; }
function secondstogo()   { timediff now "$*" "" "seconds to go"; }

function yearsdiff()     { timediff "$1" "$2" "/ 86400 / 365" "years difference" | sed 's/^-//'; }
function monthsdiff()    { timediff "$1" "$2" "/ 86400 / 30" "months difference" | sed 's/^-//'; }
function daysdiff()      { timediff "$1" "$2" "/ 86400" "days difference" | sed 's/^-//'; }
function hoursdiff()     { timediff "$1" "$2" "/ 3600" "hours difference" | sed 's/^-//'; }
function minutesdiff()   { timediff "$1" "$2" "/ 60" "minutes difference" | sed 's/^-//'; }
function secondsdiff()   { timediff "$1" "$2" "" "seconds difference" | sed 's/^-//'; }

# ssh to opsbox
alias o='ssh o'

cproj() {
	# create project directory
	mkdir $(date +%F)-$@
}

# convert markdown to mediawiki files
ctmk() {
	input_file=$1
	output_file="$(basename $input_file .md).mediawiki"
	echo "Converting '${input_file}' to '${output_file}'..."
	pandoc -f markdown -t mediawiki < $input_file > $output_file
}

# >>> AWS CLI

# old aws organization
function awsp() { aws --profile prod.admin "$@"; }
function awsd() { aws --profile loopinsights-dev.admin "$@"; }
function awsud() { aws --profile ufc-dev.admin "$@"; }
#function awsudfe() { aws --profile ufc_dev_frontend.admin "$@"; }

#function awsdi() { aws --profile demo-iot.admin "$@"; }
#function awsdp() { aws --profile demo-portal.admin "$@"; }
#function awsct() { aws --profile controltower.admin "$@"; }
function awspc() { aws --profile prod_copy.admin "$@"; }

function awsap() { aws --profile aquaman-portal.admin "$@"; }
#function awsapj() { aws --profile aquaman-portal.jenkins "$@"; }

function awsai() { aws --profile aquaman-iot.admin "$@"; }
function awsj() { aws --profile johannes-dev "$@"; }

#function awsbi() { aws --profile batman-iot.admin "$@"; }
#function awscc() { aws --profile prod.codecommit-user "$@"; }
#function awsqs() { aws --profile prod.quicksights "$@"; }

function awspp() { aws --profile prod-portal.admin "$@"; }
function awspi() { aws --profile prod-iot.admin "$@"; }

function awsnp() { aws --profile new-prod.admin "$@"; }

complete -C aws_completer awsp awsd awsud awspc awsap awsj
#complete -C aws_completer awsp awsd awsud awsudfe  awsdi awsdp awsct awspc  awsap awsapj awsbi awscc awsqs
# >>> AWS CLI

# <<< bash functions

# >>> Powerline Tools
#export PATH=$PATH:$HOME/.local/bin
#powerline-daemon -q
POWERLINE_BASH_CONTINUATION=1
POWERLINE_BASH_SELECT=1
#. /home/johannes/.local/lib/python3.6/site-packages/powerline/bindings/bash/powerline.sh
# <<< Powerline Tools

# >>> tools
export PATH=$PATH:$HOME/tools/
export PATH=$PATH:$HOME/work/aws-powertools/
# <<< tools

# cd to the git root of the current repo:
function cdgr() {
  local a
  if a=$(git root); then cd $a; fi
}

function pip-info() {
  if [[ "$1" == "" ]]; then
    echo "Usage: ${FUNCNAME[0]} pythonpackage"
    echo "  This will print the summary of the given python package."
    return 1
  fi
  local a=$(curl -L -sS "https://pypi.python.org/pypi/$1/json")
  if [[ "$a" =~ ^\{ ]]; then 
    echo "$a" | jq -r '.info? | "pip3 install \(.name?)\n  # \(.summary?)"'
  else
    echo "Package $1 not found on https://pypi.python.org" >&2
    return 1
  fi
}



export PATH=/usr/local/cuda/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libgtk3-nocsd.so.0
if [ $TILIX_ID ] || [ $VTE_VERSION ] ; then source /etc/profile.d/vte.sh; fi # Ubuntu Budgie END

# ensure folder containing pip  is part of PATH
export PATH=~/.local/bin:$PATH

# spark
export SPARK_HOME="/home/johannes/spark-2.4.0-bin-hadoop2.6/"

# Use CDPATH
#CDPATH=.:~/work:~/personal
#set -P # # Make cd show the physical path, not logical path; useful for cdpath

