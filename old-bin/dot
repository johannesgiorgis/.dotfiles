#!/bin/sh

###################################################################
#
# dot
#
# `dot` handles installation, updates, things like that.
# Run it periodically to make sure you're on 
# the latest and greatest.
#
###################################################################

set -e

export SUPPORT_DIR="${HOME}/.dotfiles/support"
source "${SUPPORT_DIR}/common-utilities.sh"

parentDirectory="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd -P)"
dotfilesDirectory="$(cd "$( dirname "$parentDirectory" )" && pwd -P)"

export INSTALL_COMMON="${dotfilesDirectory}/scripts/install-common-software.sh"
export INSTALL_VIA_APT="${dotfilesDirectory}/linux/install-software-via-apt.sh"
export INSTALL_LINUX_CUSTOM_PROGRAMS="${dotfilesDirectory}/linux/install-custom-programs.sh"
export MACOS_SOFTWARE_UPDATES="${dotfilesDirectory}/macos/install-software-updates.sh"
export INSTALL_HOMEBREW="${dotfilesDirectory}/homebrew/install-homebrew.sh"
export INSTALL_SOFTWARE_VIA_ASDF="${dotfilesDirectory}/asdf/install-software-via-asdf.sh"

function displayUsageAndExit() {
	echo "dot -- dotfiles management"
	echo ""
	echo "Usage: dot [options]"
	echo ""
	echo "Options:upgrading and autoremoving via apt"
	echo "  -e, --edit    Open dotfiles directory for editing"
	echo "  -h, --help    Show this help message and exit"
	exit
}

while test $# -gt 0; do
    case "$1" in
        "-h"|"--help")
            displayUsageAndExit
            ;;
        "-e"|"--edit")
            exec "$EDITOR" "$dotfilesDirectory"
            exit
            ;;
        *)
            echo "Invalid option: $1"
            displayUsageAndExit
            ;;
    esac
    shift
done


main() {
	start=$(date +%s)
	echo "${LINE_BREAK}"
	start "dot started"

    install_system_dependencies
	install_common_software
	# install_software_via_asdf

	end=$(date +%s)
    runtime=$((end-start))
    runtime_min=$(convert_seconds_to_min $runtime)

    finished "dot completed with $runtime seconds ($runtime_min mins)"
    echo "${LINE_BREAK}"
}


# Helper Functions

function install_system_dependencies() {
	print_info "› Installing system dependencies..."
    kernel_name="$(uname -s)"

	print_info "› Kernel Name:${kernel_name}"

	# If we're on a Mac, let's install and setup homebrew.
	if [ "${kernel_name}" == "Darwin" ]
	then
		install_mac
	fi

	if [ "${kernel_name}" == "Linux" ]
	then
		install_linux
	fi
	success "› Completed installing system dependencies!"
}


function install_common_software() {
	print_info "› running '$INSTALL_COMMON'"
    $INSTALL_COMMON 2>&1
	success "› running '$INSTALL_COMMON'"
}

function install_software_via_asdf() {
	print_info "› running '$INSTALL_SOFTWARE_VIA_ASDF'"
    $INSTALL_SOFTWARE_VIA_ASDF 2>&1
	success "› running '$INSTALL_SOFTWARE_VIA_ASDF'"
}


function install_mac() {
    print_info "› installing mac os dependencies"

	# Set macOS defaults
	# $DOT_FILES/macos/set-defaults.sh

	# Run software updates
	# $DOT_FILES/macos/install-software-updates.sh 2>&1
    $MACOS_SOFTWARE_UPDATES 2>&1

	# Install homebrew
	# $DOT_FILES/homebrew/install_homebrew.sh 2>&1
    $INSTALL_HOMEBREW 2>&1

	# Upgrade homebrew
	print_info "› running 'brew update'"
	brew update
	
    success "› mac os dependencies installed"
}


function install_linux() {
    print_info "› installing linux dependencies..."

	# Install programs via apt
    print_info "› installing via apt..."
    $INSTALL_VIA_APT 2>&1
    success "› installing via apt..."

	# Install custom programs
    print_info "› installing linux custom programs..."
    $INSTALL_LINUX_CUSTOM_PROGRAMS 2>&1
    success "› installing linux custom programs..."

	print_info "› upgrading and autoremoving via apt..."
    sudo apt-get upgrade --yes
	sudo apt-get autoremove --yes
	success "› upgrading and autoremoving via apt..."

    success "› linux dependencies installed"
}



main